---
- name: Store VPC subnet facts for future use
  ec2_vpc_subnet_facts:
    filters:
      vpc-id: "{{ec2_vpc_id}}"
    region: "{{ec2_region}}"
  register: ec2_subnet_details

# We generate a JSON query dynamically and store it in a variable.
- name: Generate subnet query.
  set_fact: subnet_query="[?tags.Name=='{{vm_name}}'].subnet_id"

# >- is a YAML parsing construct that helps avoid a newline character at the end of query.
# |first is a Jinja2 filter that returns us the first eleemnt of the array.

- name: Get subnet ID.
  set_fact:
    ec2_subnet_id: >-
      {{
        ec2_subnet_details.subnets|json_query(subnet_query)|first
      }}
  tags: always

- fail:
    msg: |
      Error: Subnet not found for {{vm_name}}!
      Query: {{subnet_query}}
      Subnet Details: {{ec2_subnet_details}}"
  when: ec2_subnet_id|length == 0
  tags: instance

- name: create ec2 instances {{vm_name}}
  ec2:
    keypair: '{{vault_ec2_keypair_name}}'
    region: "{{ec2_region}}"
    instance_type: "{{item.value.instance_type}}"
    count: "{{item.value.count}}"
    group: "{{ec2_group_name}}"
    group_id: "{{ec2_group_name}}"
    image: "{{ec2_ami_id}}"
    instance_tags: "{{vm_details.tags}}"
    id: '{{client_tokens[vm_name]}}'
    #instance_ids:
    #- i-{{client_tokens[vm_name]}}
    user_data: "{{user_data}}"
    wait: yes
    state: present
    vpc_subnet_id: "{{ec2_subnet_id}}"
    assign_public_ip: '{{public_ip}}'
  register: ec2_created_details
  tags: instance

- name: wait for SSH to be available on instances.
  delegate_to: '{{inst.public_dns_name}}'
  wait_for_connection:
    delay: 10
    timeout: 60
  with_items: "{{ec2_created_details.instances}}"
  loop_control:
    loop_var: inst
